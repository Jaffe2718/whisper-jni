name: Build and publish
on:
  workflow_dispatch:
jobs:
  download-models:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Download tiny ggml model
      run: |
        git submodule update --init
        ./download-test-model.sh
        ./download-vad-model.sh
        # Move models together for simpler download
        mkdir models
        mv ggml-tiny.bin models/
        mv ggml-silero-v5.1.2.bin models/
    - uses: actions/upload-artifact@v4
      with:
        name: test-models
        path: models/*.bin
        retention-days: 2

  build-linux:
    needs: [download-models]
    strategy:
      matrix:
        # arch is used the artifact name
        include:
          - platform: ubuntu-22.04-arm
            arch: arm64
            vulkan: ON
          - platform: ubuntu-22.04-arm
            arch: arm64
            vulkan: OFF
          - platform: ubuntu-22.04
            arch: x64
            vulkan: ON
          - platform: ubuntu-22.04
            arch: x64
            vulkan: OFF
    runs-on: ${{ matrix.platform }}
    steps:
      # Checkout HAS to come before downloading artifacts, learned that the hard way
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: test-models
      - uses: actions/setup-java@v4
        with:
          java-version: 22
          distribution: 'temurin'
      # Install Glslang because Vulkan doesn't bundle it for Ubuntu
      - name: Install Vulkan Tools
        if: matrix.vulkan == 'ON'
        run: |
          sudo apt update
          sudo apt install -y vulkan-tools glslang-tools
          sudo apt-get install -y libvulkan1 mesa-vulkan-drivers
          sudo vulkaninfo
      - name: Build shaderc
        if: matrix.vulkan == 'ON'
        run: |
          # Set up shaderc source directory and build directory
          SOURCE_DIR=$PWD/shaderc
          BUILD_DIR=$PWD/shaderc_build

          # Clone shaderc repository
          git clone https://github.com/google/shaderc $SOURCE_DIR
          cd $SOURCE_DIR
          ./utils/git-sync-deps  # This fetches the dependencies

          # Create a separate build directory
          mkdir $BUILD_DIR
          cd $BUILD_DIR

          # Build shaderc using CMake and Ninja
          cmake -GNinja -DCMAKE_BUILD_TYPE=Release $SOURCE_DIR
          ninja

          # Optionally run tests
          # ctest

          # Move glslc to a directory in PATH
          sudo mv glslc/glslc /usr/local/bin/
      # Differs from the other Vulkan action (jakoch/install-vulkan-sdk-action@v1) because this lets us install Glslang too
      # I have no idea why this is the case but atp I am embodying the "if it ain't broke don't fix it" mentality
      # ^ was I wrong? Can we go back to the OG?
      - name: Prepare Vulkan SDK
        uses: humbletim/setup-vulkan-sdk@v1.2.1
        if: matrix.vulkan == 'ON'
        with:
          vulkan-query-version: 1.4.304.1
          vulkan-components: Vulkan-Headers, Vulkan-Loader
          vulkan-use-cache: true
      - name: Setup project dir
        run: |
          git submodule update --init
          mv ./ggml-silero-v5.1.2.bin ./src/main/resources
      - name: Build
        env:
          VULKAN: ${{ matrix.vulkan }}
        run: ./build_linux.sh
      - name: Test
        run: ./gradlew test
      - name: Publish test report
        uses: mikepenz/action-junit-report@v5
        if: success() || failure()
        with:
          report_paths: '**/test-results/**/*.xml'
      - name: Upload natives
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.arch }}-${{ matrix.vulkan }}-natives
          path: whisperjni-build/*

  build-windows:
    needs: [download-models]
    runs-on: windows-latest
    strategy:
      matrix:
        vulkan: [OFF, ON]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: test-models
      - uses: actions/setup-java@v4
        with:
          java-version: 22
          distribution: 'temurin'
      # Also install Vulkan if we're building for it
      - name: Install Vulkan SDK
        uses: jakoch/install-vulkan-sdk-action@v1
        if: matrix.vulkan == 'ON'
        with:
          vulkan_version: 1.4.309.0
          install_runtime: true
          # Does using cache fuck up installing the runtime??
          # ^ yes, it seems so
          # cache: true
      - name: Setup project dir
        run: |
          git submodule update --init
          mv ./ggml-silero-v5.1.2.bin ./src/main/resources
      - name: Build
        shell: powershell
        env:
          VULKAN: ${{ matrix.vulkan }}
        run: .\build_windows.ps1
      - name: Test
        run: ./gradlew test
      - name: Publish test report
        uses: mikepenz/action-junit-report@v5
        if: success() || failure()
        with:
          report_paths: '**/build/test-results/**/*.xml'
      - name: Upload natives
        uses: actions/upload-artifact@v4
        with:
          name: windows-x64-${{ matrix.vulkan }}-natives
          path: whisperjni-build/*.dll

  build-mac:
    needs: [download-models]
    strategy:
      matrix:
        include:
        - arch: x64
          version: macos-13
          vulkan: ON
        - arch: x64
          version: macos-13
          vulkan: OFF
        - arch: arm64
          version: macos-14
          vulkan: ON
        - arch: arm64
          version: macos-14
          vulkan: OFF
    # Can't we just build on macos-14 for both?? Need to test
    runs-on: ${{ matrix.version }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: test-models
      - uses: actions/setup-java@v4
        with:
          java-version: 22
          distribution: 'temurin'
      - name: Install Vulkan SDK
        uses: humbletim/setup-vulkan-sdk@v1.2.1
        if: matrix.vulkan == 'ON'
        with:
          vulkan-query-version: latest
          vulkan-components: Vulkan-Headers, Vulkan-Loader
          vulkan-use-cache: true
      - name: Install shaderc
        if: matrix.vulkan == 'ON'
        # This envelops glslc
        run: brew install shaderc
      - name: Setup project dir
        run: |
          git submodule update --init
          mv ./ggml-silero-v5.1.2.bin ./src/main/resources
      - name: Build
        env:
          VULKAN: ${{ matrix.vulkan }}
        run: |
          export DYLD_LIBRARY_PATH=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/
          # Just in case
          chmod +x ./build_mac.sh
          ./build_mac.sh ${{ matrix.arch }}
        # Apparently gradlew isn't executable by default
      - name: Test
        run: |
          chmod +x ./gradlew
          ./gradlew test
      - name: Publish test report
        uses: mikepenz/action-junit-report@v5
        if: success() || failure()
        with:
          report_paths: '**/build/test-results/**/*.xml'
      - name: Artifact macos x64
        uses: actions/upload-artifact@v4
        with:
          name: mac-${{ matrix.arch }}-${{ matrix.vulkan }}-natives
          path: whisperjni-build/*.dylib

  publish:
    runs-on: ubuntu-latest
    needs: [download-models, build-linux, build-windows, build-mac]
    steps:
    - uses: actions/checkout@v4
    - uses: actions/download-artifact@v4
      with:
        # Put everything into /natives
        path: natives
        pattern: "*-natives"
    # We still need the silero model
    - uses: actions/download-artifact@v4
      with:
        name: test-models
    - uses: actions/setup-java@v4
      with:
        java-version: 22
        distribution: 'temurin'
    - name: Check tree
      run: ls -R
    - name: Prepare artifacts
      run: |
        echo "Moving VAD model"
        mv ./ggml-silero-v5.1.2.bin ./src/main/resources
        # Now prepare the natives
        echo "Renaming native folders to prod names"
        for native_folder in natives/*/; do
            # Get the base name of the native folder
            original_name=$(basename "$native_folder")
            native_folder_name="$original_name"

            # Rename the native folder based on the suffix
            if [[ "$native_folder_name" == *"-ON-natives" ]]; then
                native_folder_name="${native_folder_name/-ON-natives/-vulkan-natives}"
            elif [[ "$native_folder_name" == *"-OFF-natives" ]]; then
                native_folder_name="${native_folder_name/-OFF-natives/-natives}"
            else
                echo "Not renaming $original_name"
                continue
            fi

            mv "natives/${original_name}" "natives/${native_folder_name}"
        done

        echo "Flooding resources with default CPU natives"
        for resource_folder in src/main/resources/*/; do
            # Get the base folder name (instead of full path)
            folder_name=$(basename "$resource_folder")

            # Find the matching built natives folder
            for native_folder in natives/*/; do
                # Only copy if this native folder EXACTLY matches (excluding -natives)
                # This is to make sure only the CPU natives are bundled, not Vulkan
                native_basename=$(basename "$native_folder")
                if [[ "${native_basename%-natives}" == "$folder_name" ]]; then
                    echo "Copying from $native_folder to $resource_folder"
                    # Copy contents from the renamed native folder into the resource folder
                    cp -r "$native_folder"/* "$resource_folder"/
                    # Remove .gitkeep (and other hidden files but there shouldn't be anymore)
                    find "$resource_folder" -type f -name '.*' -exec rm -f {} \;
                fi
            done
        done
    - name: Build
      # We already built and tested for this platform so we're not testing again
      run: ./gradlew clean build publish --stacktrace -x test
    - name: Publish to maven central
      run: ./gradlew jreleaserDeploy --stacktrace
      env:
        JRELEASER_MAVENCENTRAL_STAGE: UPLOAD # why the hell doesn't publish work
        JRELEASER_MAVENCENTRAL_USERNAME: ${{ secrets.JRELEASER_MAVENCENTRAL_USERNAME }}
        JRELEASER_MAVENCENTRAL_PASSWORD: ${{ secrets.JRELEASER_MAVENCENTRAL_PASSWORD }}
        JRELEASER_GPG_PASSPHRASE: ${{ secrets.JRELEASER_GPG_PASSPHRASE }}
        JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.JRELEASER_GPG_PUBLIC_KEY }}
        JRELEASER_GPG_SECRET_KEY: ${{ secrets.JRELEASER_GPG_SECRET_KEY }}
    - name: Create release
      run: |
        cd natives
        # Zip everything in the same dir
        for dir in */; do
          echo "Zipping $dir"
          zip -rj "${dir%/}.zip" "$dir"
        done
    - uses: softprops/action-gh-release@v2
      with:
        draft: true
        generate_release_notes: true
        files: |
          natives/*.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
