plugins {
    id 'java-library'
    id 'maven-publish'
    id 'org.jreleaser' version '1.17.0'
}

group = 'io.github.freshsupasulley'
version = '0.5.6'
description = 'Java port of whisper.cpp, forked from whisper-jni by GiviMAD'

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    api 'org.slf4j:slf4j-api:2.0.16'
    testImplementation 'org.slf4j:slf4j-simple:2.0.16'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.11.3'
}

// Try to keep this as low as possible
// In a perfect would, this would be Java 8
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

tasks.named('test') {
    useJUnitPlatform()
}

java {
    withSourcesJar()
    withJavadocJar()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}

test {
    testLogging.showStandardStreams = true
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            
	        pom {
	            // Apparently you need to do this because it doesn't get autofilled (at least for description)
	            name = project.name
	            description = project.description
	            url = 'https://github.com/FreshSupaSulley/whisper-jni'
	            
	            licenses {
	                license {
	                    name = 'MIT License'
	                    url = 'https://opensource.org/license/mit'
	                }
	            }
	            
	            developers {
	                developer {
	                    name = 'Erich Boschert'
	                    email = 'erich.boschert10@gmail.com'
	                }
	            }
	            
	            scm {
	                connection = 'scm:git:https://github.com/FreshSupaSulley/whisper-jni.git'
	                developerConnection = 'scm:git:ssh://github.com/FreshSupaSulley/whisper-jni.git'
	                url = 'https://github.com/FreshSupaSulley/whisper-jni'
	            }
	        }
	    }
    }
    repositories {
        maven {
            url = layout.buildDirectory.dir('staging-deploy')
        }
    }
}

jreleaser {
    signing {
        active = 'ALWAYS'
        armored = true
    }
    
    deploy {
        maven {
            mavenCentral {
                sonatype {
                    active = 'ALWAYS'
                    url = 'https://central.sonatype.com/api/v1/publisher'
                    stagingRepository('build/staging-deploy')
                    
                    // Double the retry delay as publishing takes a long time
                    // Alternatively you can set JRELEASER_MAVENCENTRAL_STAGE: UPLOAD and manually publish
                    retryDelay = 40
                }
            }
        }
    }
}

task generateHeaders(type: JavaCompile) {
    group = 'whisper-jni' 
    source = fileTree('src/main/java')
    classpath = sourceSets.main.compileClasspath
    destinationDir = file("build/generated/jni-headers")
    options.headerOutputDirectory = file("src/main/native")
}

// Custom tasks for ease of use
task deployLocal {
	group = 'whisper-jni'
	description = 'Convenience method to publish to maven local'
	
	dependsOn 'clean', 'build', 'publish'
	
	build.mustRunAfter clean
    publish.mustRunAfter build
    
    finalizedBy 'publishToMavenLocal'
    
    println "Published version ${version}"
}

task deployMaven {
	group = 'whisper-jni'
	description = 'Convenience method to publish to maven central'
	
	dependsOn deployLocal
	finalizedBy 'jreleaserDeploy'
}

// Always republish to ~/.m2 even if nothing changed
//tasks.named('publishToMavenLocal') {
//    outputs.upToDateWhen { false }   // disable incremental check
//}
